@using Vidly.Models
@model IEnumerable<Vidly.Models.Customer>
@*
    Note: I've set the model for this view to IEnumerable<Customer>.
    This is a simple interface implemented by the list class. Since
    in this view we only want to iterate over this list, and we don't
    need any of the operations in the List class (eg Add, Remove, etc),
    it's better to use the IEnumerable interface, which allows use to
    iterate over the list. If in the future, we replace the List with a
    different data structure, as long as it is enumerable, our view code
    will remain unchanged.
*@

@{
    ViewBag.Title = "Customers";
    Layout = "~/Views/Shared/_Layout.cshtml";
    
}

<h2>List of Customers</h2>

<p>
    @*@Html.ActionLink("New Customer", "CustomerForm", "Customers", null, new { @class = "btn btn-primary" })*@
</p>
<table id="customers" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Customer</th>
            <th>Membership Type</th>
            <th>Discount Rate</th>
            <th>Duration in Months</th>
            <th>SignUp Fee</th>
            @*<th>Update</th>*@
            @*<th>Delete</th>*@
        </tr>
    </thead>
    <tbody>
    @foreach (var customer in Model)
    {
        <tr>
            @*<td>@Html.ActionLink(customer.Name, "Details", "Customers", new { id = customer.Id }, null)</td>*@
            <td>@customer.Name</td>
            <td>@customer.MembershipType.Name</td>
            <td>@customer.MembershipType.DiscountRate %</td>
            <td>@customer.MembershipType.DurationInMonths</td>
            <td>$ @customer.MembershipType.SignUpFee</td>
            @*<td>@Html.ActionLink("Update", "Edit", "Customers", new { id = customer.Id }, new { @class = "btn btn-info" })</td>*@
            @*<td>@Html.ActionLink("Delete", "Delete", "Customers", new { id = customer.Id }, new { @class = "btn btn-danger" })</td>*@
            @*<td><button data-customer-id="@customer.Id" class="btn btn-danger js-delete">Delete</button></td>*@
        </tr>
    }
    </tbody>
</table>


@* Para relembrar esta parte, olhar video da pasta Client-Side Development Asp.net MVC 5
   Videos 2(using jquery.js) e 3(using bootbox.js)
   Lembrando que foram para deletar linha com um Customer foi adicionado um botão <td><button>...
   usado uma tag=>data-customer-id para acessar a id via @customer.id
   usado uma tag=>customer em <table> para acessar os filhos da tabela
   usado uma tag=> js-delete para identificar local do botão para executar ação ajax.
   Além disso foi modicado padrão de caixa de dialogo do js para Bootbox.js
   Adicionado filtro após on(click) para preservar memoria *@
@section scripts
{
    <script>
        $(document).ready(function () {
            var tables =  $("#customers").DataTable({
                    "language": {
                        "sEmptyTable": "Nenhum registro encontrado",
                        "sInfo": "Mostrando de _START_ até _END_ de _TOTAL_ registros",
                        "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                        "sInfoFiltered": "(Filtrados de _MAX_ registros)",
                        "sInfoPostFix": "",
                        "sInfoThousands": ".",
                        "sLengthMenu": "_MENU_  resultados por página",
                        "sLoadingRecords": "Carregando...",
                        "sProcessing": "Processando...",
                        "sZeroRecords": "Nenhum registro encontrado",
                        "sSearch": "Pesquisar",
                        "oPaginate": {
                            "sNext": "Próximo",
                            "sPrevious": "Anterior",
                            "sFirst": "Primeiro",
                            "sLast": "Último"
                        },
                        "oAria": {
                            "sSortAscending": ": Ordenar colunas de forma ascendente",
                            "sSortDescending": ": Ordenar colunas de forma descendente"
                        }
                    }
            });


            //$("#customers").on("click",".js-delete",
            //    function () {
            //        var button = $(this);
            //        bootbox.confirm("Are you sure you want to delete this customer?",
            //            function(result) {
            //                if (result) {
            //                    $.ajax({
            //                        url: "/api/customers/" + button.attr("data-customer-id"),
            //                        method: "DELETE",
            //                        success: function () {
            //                            console.log("Success!");
            //                            tables.row(button.parents("tr")).remove().draw();                                        
            //                        }
            //                    });
            //                }
            //            });                   
            //    });
        });
    </script>
}



@*
 Algo aqui
*@